---
layout: post
title: 分词算法
author: Alvin
date: !binary |-
  MjAwNi0xMC0yNyAxMjo1NjowOSArMDgwMA==
date_gmt: !binary |-
  MjAwNi0xMC0yNyAwNDo1NjowOSArMDgwMA==
---
1．逆向最大减字匹配算法
取网页字符串，记为s,以标点符号或特有的符号分割方式划分出每一个句子（这些句子不存在歧义或不完整的现象）.用s3作为记录划分好的字符串,s3=""
1） 先分析第一个句子，把这个句子记为s1.我们取一个用来划分s1的标准长度值（汉字中一般取四到七个汉字,暂定四个）,记这个长度为wlen;
2)  s1=待分词句子,如果s1为空,取下一个句子;如果全部句子分析完，跳出,输出s3,否则如果s1的长度小于wlen的话就把s1的长度作为wlen,转入3) ;
3)  在s1中从最后一个汉字开始向前取wlen长度的字符串，记这个字符串为s2. 转到 4) ;

4)  如果这时候s2==1, 即为一个单字,转到5); 否则在索引表中(以自己建立的优先名称索引表为优先,然后才是字典索引表)查看是否有s2，如果有就在前面加个
间隔符作为分词成功记号，并把该词记录到s3中,记为s3="/"+s2+s3,并且s1=s1-s2,再回到步骤2）
中; 否则的话去掉最前面的一个字,s2=s2-1,重新回到 4);

5)  s3="/"+s2+s3,回到步骤2);

2. 正向最大减字匹配算法
算法原理与逆向最大减字匹配算法类似，只不过取长度为wlen的字符串是从第一个汉字开始，当发现词典表中没有这个词语，就去掉最后得一个字，然后重新开始
当这两种算法所得出结果不一致时，对不一致的关键词语采用消除歧义算法，最后得出符合原文意思的最佳词语.
3. 消除歧义算法
比较逆向最大减字匹配算法和正向最大减字匹配算法结果，如果不一致，利用词频概率大小对词语重新判定,选择其中的一项结果

